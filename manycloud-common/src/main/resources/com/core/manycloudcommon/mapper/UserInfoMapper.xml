<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.core.manycloudcommon.mapper.UserInfoMapper">
    <resultMap id="BaseResultMap" type="com.core.manycloudcommon.entity.UserInfo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="login_pwd" property="loginPwd" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="market" property="market" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="login_limit" property="loginLimit" jdbcType="INTEGER"/>
        <result column="login_time" property="loginTime" jdbcType="TIMESTAMP"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="login_ip" property="loginIp" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , user_id, account, login_pwd, nick_name, phone, email, market, type, status, login_limit,
    login_time, remark, create_time, update_time,login_ip
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from t_user_info
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from t_user_info
        where user_id = #{userId,jdbcType=VARCHAR}

    </select>

    <select id="selectByAccount" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from t_user_info
        where email = #{account,jdbcType=VARCHAR} or account = #{account,jdbcType=VARCHAR}
    </select>

    <select id="selectSaleByType" resultType="com.core.manycloudcommon.vo.user.UserSelectVO">
        select user_id                         as userId,
               CONCAT(nick_name, '-', account) as account
        from t_user_info
        where type = 2
           or type = 3
    </select>


    <select id="selectByMarket" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from t_user_info
        where market = #{market,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from t_user_info
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.core.manycloudcommon.entity.UserInfo">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_user_info (user_id, account, login_pwd,
        nick_name, phone, email,
        market, type, status,
        login_limit, login_time, remark,
        create_time, update_time,login_ip)
        values (#{userId,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{loginPwd,jdbcType=VARCHAR},
        #{nickName,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
        #{market,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
        #{loginLimit,jdbcType=INTEGER}, #{loginTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR},
        #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},#{loginIp,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.core.manycloudcommon.entity.UserInfo">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_user_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="account != null">
                account,
            </if>
            <if test="loginPwd != null">
                login_pwd,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="market != null">
                market,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="loginLimit != null">
                login_limit,
            </if>
            <if test="loginTime != null">
                login_time,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="loginIp != null">
                login_ip,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="account != null">
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="loginPwd != null">
                #{loginPwd,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="market != null">
                #{market,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="loginLimit != null">
                #{loginLimit,jdbcType=INTEGER},
            </if>
            <if test="loginTime != null">
                #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginIp != null">
                #{loginIp,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.core.manycloudcommon.entity.UserInfo">
        update t_user_info
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="loginPwd != null">
                login_pwd = #{loginPwd,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="market != null">
                market = #{market,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="loginLimit != null">
                login_limit = #{loginLimit,jdbcType=INTEGER},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginIp != null">
                login_ip = #{loginIp,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.core.manycloudcommon.entity.UserInfo">
        update t_user_info
        set user_id     = #{userId,jdbcType=VARCHAR},
            account     = #{account,jdbcType=VARCHAR},
            login_pwd   = #{loginPwd,jdbcType=VARCHAR},
            nick_name   = #{nickName,jdbcType=VARCHAR},
            phone       = #{phone,jdbcType=VARCHAR},
            email       = #{email,jdbcType=VARCHAR},
            market      = #{market,jdbcType=VARCHAR},
            type        = #{type,jdbcType=INTEGER},
            status      = #{status,jdbcType=INTEGER},
            login_limit = #{loginLimit,jdbcType=INTEGER},
            login_time  = #{loginTime,jdbcType=TIMESTAMP},
            remark      = #{remark,jdbcType=VARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            login_ip    = #{loginIp,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectList" resultType="com.core.manycloudcommon.vo.user.UserListVO">
        select
        u.user_id as userId,
        u.account,
        u.nick_name as nick,
        le.name as levelName,
        me.name as medalName,
        up.account as proAccount,
        uf.valid_num as balance,
        u.remark,
        u.create_time as createTime
        from
        t_user_info as u
        left join
        t_user_level as e on e.user_id = u.user_id
        left join
        t_level_info as le on le.id = e.level_id
        left join
        t_user_medal as m on m.user_id = u.user_id
        left join
        t_medal_info as me on me.id = m.medal_id
        left join
        t_user_pro as p on p.user_id = u.user_id
        left join
        t_user_info as up on up.user_id = p.pro_user_id
        left join
        t_user_finance as uf on uf.user_id = u.user_id
        where
        1 = 1
        <if test="account != null">
            and (u.email like '%${account}%' or u.account like '%${account}%')
        </if>
        <if test="nick != null">
            and u.nick_name like '%${nick}%'
        </if>
        <if test="startTime != null">
            and u.create_time >= #{startTime,jdbcType=VARCHAR}
        </if>
        <if test="endTime != null">
            and #{endTime,jdbcType=VARCHAR} >= u.create_time
        </if>
        order by e.level_id ASC
    </select>


    <!-- 新增用户统计 -->
    <select id="queryCreateNum" resultType="java.lang.Integer">
        SELECT COALESCE(COUNT(1), 0) AS num
        FROM t_user_info
        WHERE DATE_FORMAT(create_time, #{dateStyle}) = #{dateStr}
    </select>

    <!-- 活跃用户统计 -->
    <select id="queryActiveNum" resultType="java.lang.Integer">
        SELECT COALESCE(COUNT(DISTINCT tui.user_id), 0) AS num -- 去重统计用户数，防止1个用户多台主机重复计数
        FROM t_user_info tui
                 INNER JOIN
             t_instance_info tii ON tui.user_id = tii.user_id -- 关联用户和主机表
        WHERE tii.status IN (3, 4) -- 活跃状态：3或4
          AND DATE_FORMAT(tii.create_time, #{dateStyle}) = #{dateStr}
    </select>

    <select id="queryInactiveNum" resultType="java.lang.Integer">
        SELECT COALESCE(COUNT(DISTINCT tui.user_id), 0) AS num
        FROM t_user_info tui
        WHERE
          -- 用户在当前时间区间内没有活跃主机
            NOT EXISTS(
                    SELECT 1
                    FROM t_instance_info tii
                    WHERE tii.user_id = tui.user_id
                      AND tii.status IN (3, 4) -- 活跃状态
                      AND DATE_FORMAT(tii.create_time, #{dateStyle}) = #{dateStr}
                )
          -- 排除从未有过主机的用户
          AND EXISTS(
                SELECT 1
                FROM t_instance_info tii2
                WHERE tii2.user_id = tui.user_id
                  AND DATE_FORMAT(tii2.create_time, #{dateStyle}) &lt;= #{dateStr}
            )

    </select>
    <!-- 区间内活跃用户总数（去重）：只要在区间内有过活跃，就计为1次 -->
    <select id="queryActiveTotal" resultType="java.lang.Integer">
        SELECT COALESCE(COUNT(DISTINCT tui.user_id), 0) AS num
        FROM t_user_info tui
                 INNER JOIN t_instance_info tii ON tui.user_id = tii.user_id
        WHERE
            tii.status IN (3, 4) -- 活跃状态
        <![CDATA[
          AND DATE_FORMAT(tii.create_time, #{dateStyle}) >= #{startTime}
          AND DATE_FORMAT(tii.create_time, #{dateStyle}) <= #{endTime}
        ]]>
    </select>
    <!-- 区间内失活用户总数（去重）：区间内从未活跃，但有主机记录 -->
    <select id="queryInactiveTotal" resultType="java.lang.Integer">
        SELECT COALESCE(COUNT(DISTINCT tui.user_id), 0) AS num
        FROM t_user_info tui
        WHERE
          -- 条件1：区间内没有任何活跃主机
            NOT EXISTS (
                    SELECT 1
                    FROM t_instance_info tii
                    WHERE tii.user_id = tui.user_id
                      AND tii.status IN (3, 4)
              <![CDATA[
                      AND DATE_FORMAT(tii.create_time, #{dateStyle}) >= #{startTime}
                      AND DATE_FORMAT(tii.create_time, #{dateStyle}) <= #{endTime}
              ]]>
        )
    </select>
    <select id="selectListWithLevel" resultType="com.core.manycloudcommon.vo.user.UserListVO">
        SELECT
        ui.user_id as userId,
        ui.account,
        ui.nick_name as nick,
        li.name as levelName,
        CAST(NULL AS CHAR) as medalName,
        -- 推荐人的邮箱号（从t_user_pro关联t_user_info获取）
        COALESCE(recom_user.email, '') as proAccount,
        uf.valid_num as balance,
        CAST(NULL AS DECIMAL(18, 2)) as consumption,
        COALESCE(ip.num, 0) as num,
        ui.remark,
        ui.create_time as createTime
        FROM t_user_info ui
        -- 关联用户等级中间表
        LEFT JOIN t_user_level ul ON ui.user_id = ul.user_id
        -- 关联等级信息表，获取等级名称
        LEFT JOIN t_level_info li ON ul.level_id = li.id
        -- 关联用户财务表，获取可用余额
        LEFT JOIN t_user_finance uf ON ui.user_id = uf.user_id
        -- 子查询：统计状态为3、4的主机数量
        LEFT JOIN (
        SELECT user_id, COUNT(*) as num
        FROM t_instance_info
        WHERE status IN (3,4)
        GROUP BY user_id
        ) ip ON ui.user_id = ip.user_id
        -- 关联t_user_pro表，获取推荐人ID（pro_user_id）
        LEFT JOIN t_user_pro up ON ui.user_id = up.user_id
        -- 通过推荐人ID关联t_user_info，获取推荐人的邮箱
        LEFT JOIN t_user_info recom_user ON up.pro_user_id = recom_user.user_id
        WHERE 1=1
        <if test="account != null and account != ''">
            AND (ui.account LIKE CONCAT('%', #{account}, '%') OR ui.nick_name LIKE CONCAT('%', #{account}, '%'))
        </if>
        <if test="nick != null and nick != ''">
            AND ui.nick_name LIKE CONCAT('%', #{nick}, '%')
        </if>
        <if test="startTime != null and startTime != ''">
            AND ui.create_time >= #{startTime}
        </if>
        <if test="endTime != null and endTime != ''">
            <![CDATA[AND ui.create_time < DATE_ADD(#{endTime}, INTERVAL 1 DAY)]]>
        </if>
        <if test="status != null">
            AND ui.status = #{status}
        </if>
        <if test="levelId != null">
            AND ul.level_id = #{levelId}
        </if>
        ORDER BY li.level DESC, ui.create_time DESC
    </select>

</mapper>